
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Memo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Memo
 * 
 */
export type MemoModel = runtime.Types.Result.DefaultSelection<Prisma.$MemoPayload>

export type AggregateMemo = {
  _count: MemoCountAggregateOutputType | null
  _min: MemoMinAggregateOutputType | null
  _max: MemoMaxAggregateOutputType | null
}

export type MemoMinAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type MemoMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  title: string | null
  content: string | null
  createdAt: Date | null
  updatedAt: Date | null
  deletedAt: Date | null
}

export type MemoCountAggregateOutputType = {
  id: number
  userId: number
  title: number
  content: number
  createdAt: number
  updatedAt: number
  deletedAt: number
  _all: number
}


export type MemoMinAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type MemoMaxAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
}

export type MemoCountAggregateInputType = {
  id?: true
  userId?: true
  title?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  deletedAt?: true
  _all?: true
}

export type MemoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Memo to aggregate.
   */
  where?: Prisma.MemoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Memos to fetch.
   */
  orderBy?: Prisma.MemoOrderByWithRelationInput | Prisma.MemoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MemoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Memos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Memos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Memos
  **/
  _count?: true | MemoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MemoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MemoMaxAggregateInputType
}

export type GetMemoAggregateType<T extends MemoAggregateArgs> = {
      [P in keyof T & keyof AggregateMemo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMemo[P]>
    : Prisma.GetScalarType<T[P], AggregateMemo[P]>
}




export type MemoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MemoWhereInput
  orderBy?: Prisma.MemoOrderByWithAggregationInput | Prisma.MemoOrderByWithAggregationInput[]
  by: Prisma.MemoScalarFieldEnum[] | Prisma.MemoScalarFieldEnum
  having?: Prisma.MemoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MemoCountAggregateInputType | true
  _min?: MemoMinAggregateInputType
  _max?: MemoMaxAggregateInputType
}

export type MemoGroupByOutputType = {
  id: string
  userId: string
  title: string
  content: string
  createdAt: Date
  updatedAt: Date
  deletedAt: Date | null
  _count: MemoCountAggregateOutputType | null
  _min: MemoMinAggregateOutputType | null
  _max: MemoMaxAggregateOutputType | null
}

type GetMemoGroupByPayload<T extends MemoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MemoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MemoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MemoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MemoGroupByOutputType[P]>
      }
    >
  > 



export type MemoWhereInput = {
  AND?: Prisma.MemoWhereInput | Prisma.MemoWhereInput[]
  OR?: Prisma.MemoWhereInput[]
  NOT?: Prisma.MemoWhereInput | Prisma.MemoWhereInput[]
  id?: Prisma.StringFilter<"Memo"> | string
  userId?: Prisma.StringFilter<"Memo"> | string
  title?: Prisma.StringFilter<"Memo"> | string
  content?: Prisma.StringFilter<"Memo"> | string
  createdAt?: Prisma.DateTimeFilter<"Memo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Memo"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"Memo"> | Date | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MemoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type MemoWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MemoWhereInput | Prisma.MemoWhereInput[]
  OR?: Prisma.MemoWhereInput[]
  NOT?: Prisma.MemoWhereInput | Prisma.MemoWhereInput[]
  userId?: Prisma.StringFilter<"Memo"> | string
  title?: Prisma.StringFilter<"Memo"> | string
  content?: Prisma.StringFilter<"Memo"> | string
  createdAt?: Prisma.DateTimeFilter<"Memo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Memo"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"Memo"> | Date | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type MemoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.MemoCountOrderByAggregateInput
  _max?: Prisma.MemoMaxOrderByAggregateInput
  _min?: Prisma.MemoMinOrderByAggregateInput
}

export type MemoScalarWhereWithAggregatesInput = {
  AND?: Prisma.MemoScalarWhereWithAggregatesInput | Prisma.MemoScalarWhereWithAggregatesInput[]
  OR?: Prisma.MemoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MemoScalarWhereWithAggregatesInput | Prisma.MemoScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Memo"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Memo"> | string
  title?: Prisma.StringWithAggregatesFilter<"Memo"> | string
  content?: Prisma.StringWithAggregatesFilter<"Memo"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Memo"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Memo"> | Date | string
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Memo"> | Date | string | null
}

export type MemoCreateInput = {
  id?: string
  title: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutMemoInput
}

export type MemoUncheckedCreateInput = {
  id?: string
  userId: string
  title: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type MemoUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutMemoNestedInput
}

export type MemoUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MemoCreateManyInput = {
  id?: string
  userId: string
  title: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type MemoUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MemoUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MemoListRelationFilter = {
  every?: Prisma.MemoWhereInput
  some?: Prisma.MemoWhereInput
  none?: Prisma.MemoWhereInput
}

export type MemoOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MemoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type MemoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type MemoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
}

export type MemoCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MemoCreateWithoutUserInput, Prisma.MemoUncheckedCreateWithoutUserInput> | Prisma.MemoCreateWithoutUserInput[] | Prisma.MemoUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MemoCreateOrConnectWithoutUserInput | Prisma.MemoCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MemoCreateManyUserInputEnvelope
  connect?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
}

export type MemoUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MemoCreateWithoutUserInput, Prisma.MemoUncheckedCreateWithoutUserInput> | Prisma.MemoCreateWithoutUserInput[] | Prisma.MemoUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MemoCreateOrConnectWithoutUserInput | Prisma.MemoCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MemoCreateManyUserInputEnvelope
  connect?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
}

export type MemoUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MemoCreateWithoutUserInput, Prisma.MemoUncheckedCreateWithoutUserInput> | Prisma.MemoCreateWithoutUserInput[] | Prisma.MemoUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MemoCreateOrConnectWithoutUserInput | Prisma.MemoCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MemoUpsertWithWhereUniqueWithoutUserInput | Prisma.MemoUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MemoCreateManyUserInputEnvelope
  set?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
  disconnect?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
  delete?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
  connect?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
  update?: Prisma.MemoUpdateWithWhereUniqueWithoutUserInput | Prisma.MemoUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MemoUpdateManyWithWhereWithoutUserInput | Prisma.MemoUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MemoScalarWhereInput | Prisma.MemoScalarWhereInput[]
}

export type MemoUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MemoCreateWithoutUserInput, Prisma.MemoUncheckedCreateWithoutUserInput> | Prisma.MemoCreateWithoutUserInput[] | Prisma.MemoUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MemoCreateOrConnectWithoutUserInput | Prisma.MemoCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MemoUpsertWithWhereUniqueWithoutUserInput | Prisma.MemoUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MemoCreateManyUserInputEnvelope
  set?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
  disconnect?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
  delete?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
  connect?: Prisma.MemoWhereUniqueInput | Prisma.MemoWhereUniqueInput[]
  update?: Prisma.MemoUpdateWithWhereUniqueWithoutUserInput | Prisma.MemoUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MemoUpdateManyWithWhereWithoutUserInput | Prisma.MemoUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MemoScalarWhereInput | Prisma.MemoScalarWhereInput[]
}

export type MemoCreateWithoutUserInput = {
  id?: string
  title: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type MemoUncheckedCreateWithoutUserInput = {
  id?: string
  title: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type MemoCreateOrConnectWithoutUserInput = {
  where: Prisma.MemoWhereUniqueInput
  create: Prisma.XOR<Prisma.MemoCreateWithoutUserInput, Prisma.MemoUncheckedCreateWithoutUserInput>
}

export type MemoCreateManyUserInputEnvelope = {
  data: Prisma.MemoCreateManyUserInput | Prisma.MemoCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type MemoUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MemoWhereUniqueInput
  update: Prisma.XOR<Prisma.MemoUpdateWithoutUserInput, Prisma.MemoUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MemoCreateWithoutUserInput, Prisma.MemoUncheckedCreateWithoutUserInput>
}

export type MemoUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MemoWhereUniqueInput
  data: Prisma.XOR<Prisma.MemoUpdateWithoutUserInput, Prisma.MemoUncheckedUpdateWithoutUserInput>
}

export type MemoUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MemoScalarWhereInput
  data: Prisma.XOR<Prisma.MemoUpdateManyMutationInput, Prisma.MemoUncheckedUpdateManyWithoutUserInput>
}

export type MemoScalarWhereInput = {
  AND?: Prisma.MemoScalarWhereInput | Prisma.MemoScalarWhereInput[]
  OR?: Prisma.MemoScalarWhereInput[]
  NOT?: Prisma.MemoScalarWhereInput | Prisma.MemoScalarWhereInput[]
  id?: Prisma.StringFilter<"Memo"> | string
  userId?: Prisma.StringFilter<"Memo"> | string
  title?: Prisma.StringFilter<"Memo"> | string
  content?: Prisma.StringFilter<"Memo"> | string
  createdAt?: Prisma.DateTimeFilter<"Memo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Memo"> | Date | string
  deletedAt?: Prisma.DateTimeNullableFilter<"Memo"> | Date | string | null
}

export type MemoCreateManyUserInput = {
  id?: string
  title: string
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  deletedAt?: Date | string | null
}

export type MemoUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MemoUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type MemoUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}



export type MemoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["memo"]>

export type MemoSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["memo"]>

export type MemoSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  title?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["memo"]>

export type MemoSelectScalar = {
  id?: boolean
  userId?: boolean
  title?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  deletedAt?: boolean
}

export type MemoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "title" | "content" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["memo"]>
export type MemoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MemoIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MemoIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MemoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Memo"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    title: string
    content: string
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
  }, ExtArgs["result"]["memo"]>
  composites: {}
}

export type MemoGetPayload<S extends boolean | null | undefined | MemoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MemoPayload, S>

export type MemoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MemoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MemoCountAggregateInputType | true
  }

export interface MemoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Memo'], meta: { name: 'Memo' } }
  /**
   * Find zero or one Memo that matches the filter.
   * @param {MemoFindUniqueArgs} args - Arguments to find a Memo
   * @example
   * // Get one Memo
   * const memo = await prisma.memo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MemoFindUniqueArgs>(args: Prisma.SelectSubset<T, MemoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MemoClient<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Memo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MemoFindUniqueOrThrowArgs} args - Arguments to find a Memo
   * @example
   * // Get one Memo
   * const memo = await prisma.memo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MemoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MemoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MemoClient<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Memo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoFindFirstArgs} args - Arguments to find a Memo
   * @example
   * // Get one Memo
   * const memo = await prisma.memo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MemoFindFirstArgs>(args?: Prisma.SelectSubset<T, MemoFindFirstArgs<ExtArgs>>): Prisma.Prisma__MemoClient<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Memo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoFindFirstOrThrowArgs} args - Arguments to find a Memo
   * @example
   * // Get one Memo
   * const memo = await prisma.memo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MemoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MemoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MemoClient<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Memos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Memos
   * const memos = await prisma.memo.findMany()
   * 
   * // Get first 10 Memos
   * const memos = await prisma.memo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const memoWithIdOnly = await prisma.memo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MemoFindManyArgs>(args?: Prisma.SelectSubset<T, MemoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Memo.
   * @param {MemoCreateArgs} args - Arguments to create a Memo.
   * @example
   * // Create one Memo
   * const Memo = await prisma.memo.create({
   *   data: {
   *     // ... data to create a Memo
   *   }
   * })
   * 
   */
  create<T extends MemoCreateArgs>(args: Prisma.SelectSubset<T, MemoCreateArgs<ExtArgs>>): Prisma.Prisma__MemoClient<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Memos.
   * @param {MemoCreateManyArgs} args - Arguments to create many Memos.
   * @example
   * // Create many Memos
   * const memo = await prisma.memo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MemoCreateManyArgs>(args?: Prisma.SelectSubset<T, MemoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Memos and returns the data saved in the database.
   * @param {MemoCreateManyAndReturnArgs} args - Arguments to create many Memos.
   * @example
   * // Create many Memos
   * const memo = await prisma.memo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Memos and only return the `id`
   * const memoWithIdOnly = await prisma.memo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MemoCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MemoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Memo.
   * @param {MemoDeleteArgs} args - Arguments to delete one Memo.
   * @example
   * // Delete one Memo
   * const Memo = await prisma.memo.delete({
   *   where: {
   *     // ... filter to delete one Memo
   *   }
   * })
   * 
   */
  delete<T extends MemoDeleteArgs>(args: Prisma.SelectSubset<T, MemoDeleteArgs<ExtArgs>>): Prisma.Prisma__MemoClient<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Memo.
   * @param {MemoUpdateArgs} args - Arguments to update one Memo.
   * @example
   * // Update one Memo
   * const memo = await prisma.memo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MemoUpdateArgs>(args: Prisma.SelectSubset<T, MemoUpdateArgs<ExtArgs>>): Prisma.Prisma__MemoClient<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Memos.
   * @param {MemoDeleteManyArgs} args - Arguments to filter Memos to delete.
   * @example
   * // Delete a few Memos
   * const { count } = await prisma.memo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MemoDeleteManyArgs>(args?: Prisma.SelectSubset<T, MemoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Memos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Memos
   * const memo = await prisma.memo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MemoUpdateManyArgs>(args: Prisma.SelectSubset<T, MemoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Memos and returns the data updated in the database.
   * @param {MemoUpdateManyAndReturnArgs} args - Arguments to update many Memos.
   * @example
   * // Update many Memos
   * const memo = await prisma.memo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Memos and only return the `id`
   * const memoWithIdOnly = await prisma.memo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MemoUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MemoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Memo.
   * @param {MemoUpsertArgs} args - Arguments to update or create a Memo.
   * @example
   * // Update or create a Memo
   * const memo = await prisma.memo.upsert({
   *   create: {
   *     // ... data to create a Memo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Memo we want to update
   *   }
   * })
   */
  upsert<T extends MemoUpsertArgs>(args: Prisma.SelectSubset<T, MemoUpsertArgs<ExtArgs>>): Prisma.Prisma__MemoClient<runtime.Types.Result.GetResult<Prisma.$MemoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Memos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoCountArgs} args - Arguments to filter Memos to count.
   * @example
   * // Count the number of Memos
   * const count = await prisma.memo.count({
   *   where: {
   *     // ... the filter for the Memos we want to count
   *   }
   * })
  **/
  count<T extends MemoCountArgs>(
    args?: Prisma.Subset<T, MemoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MemoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Memo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MemoAggregateArgs>(args: Prisma.Subset<T, MemoAggregateArgs>): Prisma.PrismaPromise<GetMemoAggregateType<T>>

  /**
   * Group by Memo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MemoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MemoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MemoGroupByArgs['orderBy'] }
      : { orderBy?: MemoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MemoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Memo model
 */
readonly fields: MemoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Memo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MemoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Memo model
 */
export interface MemoFieldRefs {
  readonly id: Prisma.FieldRef<"Memo", 'String'>
  readonly userId: Prisma.FieldRef<"Memo", 'String'>
  readonly title: Prisma.FieldRef<"Memo", 'String'>
  readonly content: Prisma.FieldRef<"Memo", 'String'>
  readonly createdAt: Prisma.FieldRef<"Memo", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Memo", 'DateTime'>
  readonly deletedAt: Prisma.FieldRef<"Memo", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Memo findUnique
 */
export type MemoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
  /**
   * Filter, which Memo to fetch.
   */
  where: Prisma.MemoWhereUniqueInput
}

/**
 * Memo findUniqueOrThrow
 */
export type MemoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
  /**
   * Filter, which Memo to fetch.
   */
  where: Prisma.MemoWhereUniqueInput
}

/**
 * Memo findFirst
 */
export type MemoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
  /**
   * Filter, which Memo to fetch.
   */
  where?: Prisma.MemoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Memos to fetch.
   */
  orderBy?: Prisma.MemoOrderByWithRelationInput | Prisma.MemoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Memos.
   */
  cursor?: Prisma.MemoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Memos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Memos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Memos.
   */
  distinct?: Prisma.MemoScalarFieldEnum | Prisma.MemoScalarFieldEnum[]
}

/**
 * Memo findFirstOrThrow
 */
export type MemoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
  /**
   * Filter, which Memo to fetch.
   */
  where?: Prisma.MemoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Memos to fetch.
   */
  orderBy?: Prisma.MemoOrderByWithRelationInput | Prisma.MemoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Memos.
   */
  cursor?: Prisma.MemoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Memos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Memos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Memos.
   */
  distinct?: Prisma.MemoScalarFieldEnum | Prisma.MemoScalarFieldEnum[]
}

/**
 * Memo findMany
 */
export type MemoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
  /**
   * Filter, which Memos to fetch.
   */
  where?: Prisma.MemoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Memos to fetch.
   */
  orderBy?: Prisma.MemoOrderByWithRelationInput | Prisma.MemoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Memos.
   */
  cursor?: Prisma.MemoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Memos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Memos.
   */
  skip?: number
  distinct?: Prisma.MemoScalarFieldEnum | Prisma.MemoScalarFieldEnum[]
}

/**
 * Memo create
 */
export type MemoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
  /**
   * The data needed to create a Memo.
   */
  data: Prisma.XOR<Prisma.MemoCreateInput, Prisma.MemoUncheckedCreateInput>
}

/**
 * Memo createMany
 */
export type MemoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Memos.
   */
  data: Prisma.MemoCreateManyInput | Prisma.MemoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Memo createManyAndReturn
 */
export type MemoCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * The data used to create many Memos.
   */
  data: Prisma.MemoCreateManyInput | Prisma.MemoCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Memo update
 */
export type MemoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
  /**
   * The data needed to update a Memo.
   */
  data: Prisma.XOR<Prisma.MemoUpdateInput, Prisma.MemoUncheckedUpdateInput>
  /**
   * Choose, which Memo to update.
   */
  where: Prisma.MemoWhereUniqueInput
}

/**
 * Memo updateMany
 */
export type MemoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Memos.
   */
  data: Prisma.XOR<Prisma.MemoUpdateManyMutationInput, Prisma.MemoUncheckedUpdateManyInput>
  /**
   * Filter which Memos to update
   */
  where?: Prisma.MemoWhereInput
  /**
   * Limit how many Memos to update.
   */
  limit?: number
}

/**
 * Memo updateManyAndReturn
 */
export type MemoUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * The data used to update Memos.
   */
  data: Prisma.XOR<Prisma.MemoUpdateManyMutationInput, Prisma.MemoUncheckedUpdateManyInput>
  /**
   * Filter which Memos to update
   */
  where?: Prisma.MemoWhereInput
  /**
   * Limit how many Memos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Memo upsert
 */
export type MemoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
  /**
   * The filter to search for the Memo to update in case it exists.
   */
  where: Prisma.MemoWhereUniqueInput
  /**
   * In case the Memo found by the `where` argument doesn't exist, create a new Memo with this data.
   */
  create: Prisma.XOR<Prisma.MemoCreateInput, Prisma.MemoUncheckedCreateInput>
  /**
   * In case the Memo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MemoUpdateInput, Prisma.MemoUncheckedUpdateInput>
}

/**
 * Memo delete
 */
export type MemoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
  /**
   * Filter which Memo to delete.
   */
  where: Prisma.MemoWhereUniqueInput
}

/**
 * Memo deleteMany
 */
export type MemoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Memos to delete
   */
  where?: Prisma.MemoWhereInput
  /**
   * Limit how many Memos to delete.
   */
  limit?: number
}

/**
 * Memo without action
 */
export type MemoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Memo
   */
  select?: Prisma.MemoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Memo
   */
  omit?: Prisma.MemoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MemoInclude<ExtArgs> | null
}
