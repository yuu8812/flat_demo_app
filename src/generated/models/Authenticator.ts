
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Authenticator` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Authenticator
 * 
 */
export type AuthenticatorModel = runtime.Types.Result.DefaultSelection<Prisma.$AuthenticatorPayload>

export type AggregateAuthenticator = {
  _count: AuthenticatorCountAggregateOutputType | null
  _avg: AuthenticatorAvgAggregateOutputType | null
  _sum: AuthenticatorSumAggregateOutputType | null
  _min: AuthenticatorMinAggregateOutputType | null
  _max: AuthenticatorMaxAggregateOutputType | null
}

export type AuthenticatorAvgAggregateOutputType = {
  counter: number | null
}

export type AuthenticatorSumAggregateOutputType = {
  counter: number | null
}

export type AuthenticatorMinAggregateOutputType = {
  credentialID: string | null
  userId: string | null
  providerAccountId: string | null
  credentialPublicKey: string | null
  counter: number | null
  credentialDeviceType: string | null
  credentialBackedUp: boolean | null
  transports: string | null
}

export type AuthenticatorMaxAggregateOutputType = {
  credentialID: string | null
  userId: string | null
  providerAccountId: string | null
  credentialPublicKey: string | null
  counter: number | null
  credentialDeviceType: string | null
  credentialBackedUp: boolean | null
  transports: string | null
}

export type AuthenticatorCountAggregateOutputType = {
  credentialID: number
  userId: number
  providerAccountId: number
  credentialPublicKey: number
  counter: number
  credentialDeviceType: number
  credentialBackedUp: number
  transports: number
  _all: number
}


export type AuthenticatorAvgAggregateInputType = {
  counter?: true
}

export type AuthenticatorSumAggregateInputType = {
  counter?: true
}

export type AuthenticatorMinAggregateInputType = {
  credentialID?: true
  userId?: true
  providerAccountId?: true
  credentialPublicKey?: true
  counter?: true
  credentialDeviceType?: true
  credentialBackedUp?: true
  transports?: true
}

export type AuthenticatorMaxAggregateInputType = {
  credentialID?: true
  userId?: true
  providerAccountId?: true
  credentialPublicKey?: true
  counter?: true
  credentialDeviceType?: true
  credentialBackedUp?: true
  transports?: true
}

export type AuthenticatorCountAggregateInputType = {
  credentialID?: true
  userId?: true
  providerAccountId?: true
  credentialPublicKey?: true
  counter?: true
  credentialDeviceType?: true
  credentialBackedUp?: true
  transports?: true
  _all?: true
}

export type AuthenticatorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Authenticator to aggregate.
   */
  where?: Prisma.AuthenticatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Authenticators to fetch.
   */
  orderBy?: Prisma.AuthenticatorOrderByWithRelationInput | Prisma.AuthenticatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AuthenticatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Authenticators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Authenticators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Authenticators
  **/
  _count?: true | AuthenticatorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AuthenticatorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AuthenticatorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AuthenticatorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AuthenticatorMaxAggregateInputType
}

export type GetAuthenticatorAggregateType<T extends AuthenticatorAggregateArgs> = {
      [P in keyof T & keyof AggregateAuthenticator]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAuthenticator[P]>
    : Prisma.GetScalarType<T[P], AggregateAuthenticator[P]>
}




export type AuthenticatorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AuthenticatorWhereInput
  orderBy?: Prisma.AuthenticatorOrderByWithAggregationInput | Prisma.AuthenticatorOrderByWithAggregationInput[]
  by: Prisma.AuthenticatorScalarFieldEnum[] | Prisma.AuthenticatorScalarFieldEnum
  having?: Prisma.AuthenticatorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AuthenticatorCountAggregateInputType | true
  _avg?: AuthenticatorAvgAggregateInputType
  _sum?: AuthenticatorSumAggregateInputType
  _min?: AuthenticatorMinAggregateInputType
  _max?: AuthenticatorMaxAggregateInputType
}

export type AuthenticatorGroupByOutputType = {
  credentialID: string
  userId: string
  providerAccountId: string
  credentialPublicKey: string
  counter: number
  credentialDeviceType: string
  credentialBackedUp: boolean
  transports: string | null
  _count: AuthenticatorCountAggregateOutputType | null
  _avg: AuthenticatorAvgAggregateOutputType | null
  _sum: AuthenticatorSumAggregateOutputType | null
  _min: AuthenticatorMinAggregateOutputType | null
  _max: AuthenticatorMaxAggregateOutputType | null
}

type GetAuthenticatorGroupByPayload<T extends AuthenticatorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AuthenticatorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AuthenticatorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AuthenticatorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AuthenticatorGroupByOutputType[P]>
      }
    >
  > 



export type AuthenticatorWhereInput = {
  AND?: Prisma.AuthenticatorWhereInput | Prisma.AuthenticatorWhereInput[]
  OR?: Prisma.AuthenticatorWhereInput[]
  NOT?: Prisma.AuthenticatorWhereInput | Prisma.AuthenticatorWhereInput[]
  credentialID?: Prisma.StringFilter<"Authenticator"> | string
  userId?: Prisma.StringFilter<"Authenticator"> | string
  providerAccountId?: Prisma.StringFilter<"Authenticator"> | string
  credentialPublicKey?: Prisma.StringFilter<"Authenticator"> | string
  counter?: Prisma.IntFilter<"Authenticator"> | number
  credentialDeviceType?: Prisma.StringFilter<"Authenticator"> | string
  credentialBackedUp?: Prisma.BoolFilter<"Authenticator"> | boolean
  transports?: Prisma.StringNullableFilter<"Authenticator"> | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AuthenticatorOrderByWithRelationInput = {
  credentialID?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  credentialPublicKey?: Prisma.SortOrder
  counter?: Prisma.SortOrder
  credentialDeviceType?: Prisma.SortOrder
  credentialBackedUp?: Prisma.SortOrder
  transports?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type AuthenticatorWhereUniqueInput = Prisma.AtLeast<{
  credentialID?: string
  userId_credentialID?: Prisma.AuthenticatorUserIdCredentialIDCompoundUniqueInput
  AND?: Prisma.AuthenticatorWhereInput | Prisma.AuthenticatorWhereInput[]
  OR?: Prisma.AuthenticatorWhereInput[]
  NOT?: Prisma.AuthenticatorWhereInput | Prisma.AuthenticatorWhereInput[]
  userId?: Prisma.StringFilter<"Authenticator"> | string
  providerAccountId?: Prisma.StringFilter<"Authenticator"> | string
  credentialPublicKey?: Prisma.StringFilter<"Authenticator"> | string
  counter?: Prisma.IntFilter<"Authenticator"> | number
  credentialDeviceType?: Prisma.StringFilter<"Authenticator"> | string
  credentialBackedUp?: Prisma.BoolFilter<"Authenticator"> | boolean
  transports?: Prisma.StringNullableFilter<"Authenticator"> | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "userId_credentialID" | "credentialID">

export type AuthenticatorOrderByWithAggregationInput = {
  credentialID?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  credentialPublicKey?: Prisma.SortOrder
  counter?: Prisma.SortOrder
  credentialDeviceType?: Prisma.SortOrder
  credentialBackedUp?: Prisma.SortOrder
  transports?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AuthenticatorCountOrderByAggregateInput
  _avg?: Prisma.AuthenticatorAvgOrderByAggregateInput
  _max?: Prisma.AuthenticatorMaxOrderByAggregateInput
  _min?: Prisma.AuthenticatorMinOrderByAggregateInput
  _sum?: Prisma.AuthenticatorSumOrderByAggregateInput
}

export type AuthenticatorScalarWhereWithAggregatesInput = {
  AND?: Prisma.AuthenticatorScalarWhereWithAggregatesInput | Prisma.AuthenticatorScalarWhereWithAggregatesInput[]
  OR?: Prisma.AuthenticatorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AuthenticatorScalarWhereWithAggregatesInput | Prisma.AuthenticatorScalarWhereWithAggregatesInput[]
  credentialID?: Prisma.StringWithAggregatesFilter<"Authenticator"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Authenticator"> | string
  providerAccountId?: Prisma.StringWithAggregatesFilter<"Authenticator"> | string
  credentialPublicKey?: Prisma.StringWithAggregatesFilter<"Authenticator"> | string
  counter?: Prisma.IntWithAggregatesFilter<"Authenticator"> | number
  credentialDeviceType?: Prisma.StringWithAggregatesFilter<"Authenticator"> | string
  credentialBackedUp?: Prisma.BoolWithAggregatesFilter<"Authenticator"> | boolean
  transports?: Prisma.StringNullableWithAggregatesFilter<"Authenticator"> | string | null
}

export type AuthenticatorCreateInput = {
  credentialID: string
  providerAccountId: string
  credentialPublicKey: string
  counter: number
  credentialDeviceType: string
  credentialBackedUp: boolean
  transports?: string | null
  user: Prisma.UserCreateNestedOneWithoutAuthenticatorInput
}

export type AuthenticatorUncheckedCreateInput = {
  credentialID: string
  userId: string
  providerAccountId: string
  credentialPublicKey: string
  counter: number
  credentialDeviceType: string
  credentialBackedUp: boolean
  transports?: string | null
}

export type AuthenticatorUpdateInput = {
  credentialID?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  credentialPublicKey?: Prisma.StringFieldUpdateOperationsInput | string
  counter?: Prisma.IntFieldUpdateOperationsInput | number
  credentialDeviceType?: Prisma.StringFieldUpdateOperationsInput | string
  credentialBackedUp?: Prisma.BoolFieldUpdateOperationsInput | boolean
  transports?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutAuthenticatorNestedInput
}

export type AuthenticatorUncheckedUpdateInput = {
  credentialID?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  credentialPublicKey?: Prisma.StringFieldUpdateOperationsInput | string
  counter?: Prisma.IntFieldUpdateOperationsInput | number
  credentialDeviceType?: Prisma.StringFieldUpdateOperationsInput | string
  credentialBackedUp?: Prisma.BoolFieldUpdateOperationsInput | boolean
  transports?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AuthenticatorCreateManyInput = {
  credentialID: string
  userId: string
  providerAccountId: string
  credentialPublicKey: string
  counter: number
  credentialDeviceType: string
  credentialBackedUp: boolean
  transports?: string | null
}

export type AuthenticatorUpdateManyMutationInput = {
  credentialID?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  credentialPublicKey?: Prisma.StringFieldUpdateOperationsInput | string
  counter?: Prisma.IntFieldUpdateOperationsInput | number
  credentialDeviceType?: Prisma.StringFieldUpdateOperationsInput | string
  credentialBackedUp?: Prisma.BoolFieldUpdateOperationsInput | boolean
  transports?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AuthenticatorUncheckedUpdateManyInput = {
  credentialID?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  credentialPublicKey?: Prisma.StringFieldUpdateOperationsInput | string
  counter?: Prisma.IntFieldUpdateOperationsInput | number
  credentialDeviceType?: Prisma.StringFieldUpdateOperationsInput | string
  credentialBackedUp?: Prisma.BoolFieldUpdateOperationsInput | boolean
  transports?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AuthenticatorListRelationFilter = {
  every?: Prisma.AuthenticatorWhereInput
  some?: Prisma.AuthenticatorWhereInput
  none?: Prisma.AuthenticatorWhereInput
}

export type AuthenticatorOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AuthenticatorUserIdCredentialIDCompoundUniqueInput = {
  userId: string
  credentialID: string
}

export type AuthenticatorCountOrderByAggregateInput = {
  credentialID?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  credentialPublicKey?: Prisma.SortOrder
  counter?: Prisma.SortOrder
  credentialDeviceType?: Prisma.SortOrder
  credentialBackedUp?: Prisma.SortOrder
  transports?: Prisma.SortOrder
}

export type AuthenticatorAvgOrderByAggregateInput = {
  counter?: Prisma.SortOrder
}

export type AuthenticatorMaxOrderByAggregateInput = {
  credentialID?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  credentialPublicKey?: Prisma.SortOrder
  counter?: Prisma.SortOrder
  credentialDeviceType?: Prisma.SortOrder
  credentialBackedUp?: Prisma.SortOrder
  transports?: Prisma.SortOrder
}

export type AuthenticatorMinOrderByAggregateInput = {
  credentialID?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  providerAccountId?: Prisma.SortOrder
  credentialPublicKey?: Prisma.SortOrder
  counter?: Prisma.SortOrder
  credentialDeviceType?: Prisma.SortOrder
  credentialBackedUp?: Prisma.SortOrder
  transports?: Prisma.SortOrder
}

export type AuthenticatorSumOrderByAggregateInput = {
  counter?: Prisma.SortOrder
}

export type AuthenticatorCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AuthenticatorCreateWithoutUserInput, Prisma.AuthenticatorUncheckedCreateWithoutUserInput> | Prisma.AuthenticatorCreateWithoutUserInput[] | Prisma.AuthenticatorUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AuthenticatorCreateOrConnectWithoutUserInput | Prisma.AuthenticatorCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AuthenticatorCreateManyUserInputEnvelope
  connect?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
}

export type AuthenticatorUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AuthenticatorCreateWithoutUserInput, Prisma.AuthenticatorUncheckedCreateWithoutUserInput> | Prisma.AuthenticatorCreateWithoutUserInput[] | Prisma.AuthenticatorUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AuthenticatorCreateOrConnectWithoutUserInput | Prisma.AuthenticatorCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AuthenticatorCreateManyUserInputEnvelope
  connect?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
}

export type AuthenticatorUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AuthenticatorCreateWithoutUserInput, Prisma.AuthenticatorUncheckedCreateWithoutUserInput> | Prisma.AuthenticatorCreateWithoutUserInput[] | Prisma.AuthenticatorUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AuthenticatorCreateOrConnectWithoutUserInput | Prisma.AuthenticatorCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AuthenticatorUpsertWithWhereUniqueWithoutUserInput | Prisma.AuthenticatorUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AuthenticatorCreateManyUserInputEnvelope
  set?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
  disconnect?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
  delete?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
  connect?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
  update?: Prisma.AuthenticatorUpdateWithWhereUniqueWithoutUserInput | Prisma.AuthenticatorUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AuthenticatorUpdateManyWithWhereWithoutUserInput | Prisma.AuthenticatorUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AuthenticatorScalarWhereInput | Prisma.AuthenticatorScalarWhereInput[]
}

export type AuthenticatorUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AuthenticatorCreateWithoutUserInput, Prisma.AuthenticatorUncheckedCreateWithoutUserInput> | Prisma.AuthenticatorCreateWithoutUserInput[] | Prisma.AuthenticatorUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AuthenticatorCreateOrConnectWithoutUserInput | Prisma.AuthenticatorCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AuthenticatorUpsertWithWhereUniqueWithoutUserInput | Prisma.AuthenticatorUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AuthenticatorCreateManyUserInputEnvelope
  set?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
  disconnect?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
  delete?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
  connect?: Prisma.AuthenticatorWhereUniqueInput | Prisma.AuthenticatorWhereUniqueInput[]
  update?: Prisma.AuthenticatorUpdateWithWhereUniqueWithoutUserInput | Prisma.AuthenticatorUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AuthenticatorUpdateManyWithWhereWithoutUserInput | Prisma.AuthenticatorUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AuthenticatorScalarWhereInput | Prisma.AuthenticatorScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type AuthenticatorCreateWithoutUserInput = {
  credentialID: string
  providerAccountId: string
  credentialPublicKey: string
  counter: number
  credentialDeviceType: string
  credentialBackedUp: boolean
  transports?: string | null
}

export type AuthenticatorUncheckedCreateWithoutUserInput = {
  credentialID: string
  providerAccountId: string
  credentialPublicKey: string
  counter: number
  credentialDeviceType: string
  credentialBackedUp: boolean
  transports?: string | null
}

export type AuthenticatorCreateOrConnectWithoutUserInput = {
  where: Prisma.AuthenticatorWhereUniqueInput
  create: Prisma.XOR<Prisma.AuthenticatorCreateWithoutUserInput, Prisma.AuthenticatorUncheckedCreateWithoutUserInput>
}

export type AuthenticatorCreateManyUserInputEnvelope = {
  data: Prisma.AuthenticatorCreateManyUserInput | Prisma.AuthenticatorCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type AuthenticatorUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AuthenticatorWhereUniqueInput
  update: Prisma.XOR<Prisma.AuthenticatorUpdateWithoutUserInput, Prisma.AuthenticatorUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AuthenticatorCreateWithoutUserInput, Prisma.AuthenticatorUncheckedCreateWithoutUserInput>
}

export type AuthenticatorUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AuthenticatorWhereUniqueInput
  data: Prisma.XOR<Prisma.AuthenticatorUpdateWithoutUserInput, Prisma.AuthenticatorUncheckedUpdateWithoutUserInput>
}

export type AuthenticatorUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AuthenticatorScalarWhereInput
  data: Prisma.XOR<Prisma.AuthenticatorUpdateManyMutationInput, Prisma.AuthenticatorUncheckedUpdateManyWithoutUserInput>
}

export type AuthenticatorScalarWhereInput = {
  AND?: Prisma.AuthenticatorScalarWhereInput | Prisma.AuthenticatorScalarWhereInput[]
  OR?: Prisma.AuthenticatorScalarWhereInput[]
  NOT?: Prisma.AuthenticatorScalarWhereInput | Prisma.AuthenticatorScalarWhereInput[]
  credentialID?: Prisma.StringFilter<"Authenticator"> | string
  userId?: Prisma.StringFilter<"Authenticator"> | string
  providerAccountId?: Prisma.StringFilter<"Authenticator"> | string
  credentialPublicKey?: Prisma.StringFilter<"Authenticator"> | string
  counter?: Prisma.IntFilter<"Authenticator"> | number
  credentialDeviceType?: Prisma.StringFilter<"Authenticator"> | string
  credentialBackedUp?: Prisma.BoolFilter<"Authenticator"> | boolean
  transports?: Prisma.StringNullableFilter<"Authenticator"> | string | null
}

export type AuthenticatorCreateManyUserInput = {
  credentialID: string
  providerAccountId: string
  credentialPublicKey: string
  counter: number
  credentialDeviceType: string
  credentialBackedUp: boolean
  transports?: string | null
}

export type AuthenticatorUpdateWithoutUserInput = {
  credentialID?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  credentialPublicKey?: Prisma.StringFieldUpdateOperationsInput | string
  counter?: Prisma.IntFieldUpdateOperationsInput | number
  credentialDeviceType?: Prisma.StringFieldUpdateOperationsInput | string
  credentialBackedUp?: Prisma.BoolFieldUpdateOperationsInput | boolean
  transports?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AuthenticatorUncheckedUpdateWithoutUserInput = {
  credentialID?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  credentialPublicKey?: Prisma.StringFieldUpdateOperationsInput | string
  counter?: Prisma.IntFieldUpdateOperationsInput | number
  credentialDeviceType?: Prisma.StringFieldUpdateOperationsInput | string
  credentialBackedUp?: Prisma.BoolFieldUpdateOperationsInput | boolean
  transports?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AuthenticatorUncheckedUpdateManyWithoutUserInput = {
  credentialID?: Prisma.StringFieldUpdateOperationsInput | string
  providerAccountId?: Prisma.StringFieldUpdateOperationsInput | string
  credentialPublicKey?: Prisma.StringFieldUpdateOperationsInput | string
  counter?: Prisma.IntFieldUpdateOperationsInput | number
  credentialDeviceType?: Prisma.StringFieldUpdateOperationsInput | string
  credentialBackedUp?: Prisma.BoolFieldUpdateOperationsInput | boolean
  transports?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type AuthenticatorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  credentialID?: boolean
  userId?: boolean
  providerAccountId?: boolean
  credentialPublicKey?: boolean
  counter?: boolean
  credentialDeviceType?: boolean
  credentialBackedUp?: boolean
  transports?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["authenticator"]>

export type AuthenticatorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  credentialID?: boolean
  userId?: boolean
  providerAccountId?: boolean
  credentialPublicKey?: boolean
  counter?: boolean
  credentialDeviceType?: boolean
  credentialBackedUp?: boolean
  transports?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["authenticator"]>

export type AuthenticatorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  credentialID?: boolean
  userId?: boolean
  providerAccountId?: boolean
  credentialPublicKey?: boolean
  counter?: boolean
  credentialDeviceType?: boolean
  credentialBackedUp?: boolean
  transports?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["authenticator"]>

export type AuthenticatorSelectScalar = {
  credentialID?: boolean
  userId?: boolean
  providerAccountId?: boolean
  credentialPublicKey?: boolean
  counter?: boolean
  credentialDeviceType?: boolean
  credentialBackedUp?: boolean
  transports?: boolean
}

export type AuthenticatorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"credentialID" | "userId" | "providerAccountId" | "credentialPublicKey" | "counter" | "credentialDeviceType" | "credentialBackedUp" | "transports", ExtArgs["result"]["authenticator"]>
export type AuthenticatorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AuthenticatorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AuthenticatorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AuthenticatorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Authenticator"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    credentialID: string
    userId: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports: string | null
  }, ExtArgs["result"]["authenticator"]>
  composites: {}
}

export type AuthenticatorGetPayload<S extends boolean | null | undefined | AuthenticatorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload, S>

export type AuthenticatorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AuthenticatorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AuthenticatorCountAggregateInputType | true
  }

export interface AuthenticatorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Authenticator'], meta: { name: 'Authenticator' } }
  /**
   * Find zero or one Authenticator that matches the filter.
   * @param {AuthenticatorFindUniqueArgs} args - Arguments to find a Authenticator
   * @example
   * // Get one Authenticator
   * const authenticator = await prisma.authenticator.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AuthenticatorFindUniqueArgs>(args: Prisma.SelectSubset<T, AuthenticatorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AuthenticatorClient<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Authenticator that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AuthenticatorFindUniqueOrThrowArgs} args - Arguments to find a Authenticator
   * @example
   * // Get one Authenticator
   * const authenticator = await prisma.authenticator.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AuthenticatorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AuthenticatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuthenticatorClient<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Authenticator that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthenticatorFindFirstArgs} args - Arguments to find a Authenticator
   * @example
   * // Get one Authenticator
   * const authenticator = await prisma.authenticator.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AuthenticatorFindFirstArgs>(args?: Prisma.SelectSubset<T, AuthenticatorFindFirstArgs<ExtArgs>>): Prisma.Prisma__AuthenticatorClient<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Authenticator that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthenticatorFindFirstOrThrowArgs} args - Arguments to find a Authenticator
   * @example
   * // Get one Authenticator
   * const authenticator = await prisma.authenticator.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AuthenticatorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AuthenticatorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AuthenticatorClient<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Authenticators that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthenticatorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Authenticators
   * const authenticators = await prisma.authenticator.findMany()
   * 
   * // Get first 10 Authenticators
   * const authenticators = await prisma.authenticator.findMany({ take: 10 })
   * 
   * // Only select the `credentialID`
   * const authenticatorWithCredentialIDOnly = await prisma.authenticator.findMany({ select: { credentialID: true } })
   * 
   */
  findMany<T extends AuthenticatorFindManyArgs>(args?: Prisma.SelectSubset<T, AuthenticatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Authenticator.
   * @param {AuthenticatorCreateArgs} args - Arguments to create a Authenticator.
   * @example
   * // Create one Authenticator
   * const Authenticator = await prisma.authenticator.create({
   *   data: {
   *     // ... data to create a Authenticator
   *   }
   * })
   * 
   */
  create<T extends AuthenticatorCreateArgs>(args: Prisma.SelectSubset<T, AuthenticatorCreateArgs<ExtArgs>>): Prisma.Prisma__AuthenticatorClient<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Authenticators.
   * @param {AuthenticatorCreateManyArgs} args - Arguments to create many Authenticators.
   * @example
   * // Create many Authenticators
   * const authenticator = await prisma.authenticator.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AuthenticatorCreateManyArgs>(args?: Prisma.SelectSubset<T, AuthenticatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Authenticators and returns the data saved in the database.
   * @param {AuthenticatorCreateManyAndReturnArgs} args - Arguments to create many Authenticators.
   * @example
   * // Create many Authenticators
   * const authenticator = await prisma.authenticator.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Authenticators and only return the `credentialID`
   * const authenticatorWithCredentialIDOnly = await prisma.authenticator.createManyAndReturn({
   *   select: { credentialID: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AuthenticatorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AuthenticatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Authenticator.
   * @param {AuthenticatorDeleteArgs} args - Arguments to delete one Authenticator.
   * @example
   * // Delete one Authenticator
   * const Authenticator = await prisma.authenticator.delete({
   *   where: {
   *     // ... filter to delete one Authenticator
   *   }
   * })
   * 
   */
  delete<T extends AuthenticatorDeleteArgs>(args: Prisma.SelectSubset<T, AuthenticatorDeleteArgs<ExtArgs>>): Prisma.Prisma__AuthenticatorClient<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Authenticator.
   * @param {AuthenticatorUpdateArgs} args - Arguments to update one Authenticator.
   * @example
   * // Update one Authenticator
   * const authenticator = await prisma.authenticator.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AuthenticatorUpdateArgs>(args: Prisma.SelectSubset<T, AuthenticatorUpdateArgs<ExtArgs>>): Prisma.Prisma__AuthenticatorClient<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Authenticators.
   * @param {AuthenticatorDeleteManyArgs} args - Arguments to filter Authenticators to delete.
   * @example
   * // Delete a few Authenticators
   * const { count } = await prisma.authenticator.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AuthenticatorDeleteManyArgs>(args?: Prisma.SelectSubset<T, AuthenticatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Authenticators.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthenticatorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Authenticators
   * const authenticator = await prisma.authenticator.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AuthenticatorUpdateManyArgs>(args: Prisma.SelectSubset<T, AuthenticatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Authenticators and returns the data updated in the database.
   * @param {AuthenticatorUpdateManyAndReturnArgs} args - Arguments to update many Authenticators.
   * @example
   * // Update many Authenticators
   * const authenticator = await prisma.authenticator.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Authenticators and only return the `credentialID`
   * const authenticatorWithCredentialIDOnly = await prisma.authenticator.updateManyAndReturn({
   *   select: { credentialID: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AuthenticatorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AuthenticatorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Authenticator.
   * @param {AuthenticatorUpsertArgs} args - Arguments to update or create a Authenticator.
   * @example
   * // Update or create a Authenticator
   * const authenticator = await prisma.authenticator.upsert({
   *   create: {
   *     // ... data to create a Authenticator
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Authenticator we want to update
   *   }
   * })
   */
  upsert<T extends AuthenticatorUpsertArgs>(args: Prisma.SelectSubset<T, AuthenticatorUpsertArgs<ExtArgs>>): Prisma.Prisma__AuthenticatorClient<runtime.Types.Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Authenticators.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthenticatorCountArgs} args - Arguments to filter Authenticators to count.
   * @example
   * // Count the number of Authenticators
   * const count = await prisma.authenticator.count({
   *   where: {
   *     // ... the filter for the Authenticators we want to count
   *   }
   * })
  **/
  count<T extends AuthenticatorCountArgs>(
    args?: Prisma.Subset<T, AuthenticatorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AuthenticatorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Authenticator.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthenticatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AuthenticatorAggregateArgs>(args: Prisma.Subset<T, AuthenticatorAggregateArgs>): Prisma.PrismaPromise<GetAuthenticatorAggregateType<T>>

  /**
   * Group by Authenticator.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AuthenticatorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AuthenticatorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AuthenticatorGroupByArgs['orderBy'] }
      : { orderBy?: AuthenticatorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AuthenticatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthenticatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Authenticator model
 */
readonly fields: AuthenticatorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Authenticator.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AuthenticatorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Authenticator model
 */
export interface AuthenticatorFieldRefs {
  readonly credentialID: Prisma.FieldRef<"Authenticator", 'String'>
  readonly userId: Prisma.FieldRef<"Authenticator", 'String'>
  readonly providerAccountId: Prisma.FieldRef<"Authenticator", 'String'>
  readonly credentialPublicKey: Prisma.FieldRef<"Authenticator", 'String'>
  readonly counter: Prisma.FieldRef<"Authenticator", 'Int'>
  readonly credentialDeviceType: Prisma.FieldRef<"Authenticator", 'String'>
  readonly credentialBackedUp: Prisma.FieldRef<"Authenticator", 'Boolean'>
  readonly transports: Prisma.FieldRef<"Authenticator", 'String'>
}
    

// Custom InputTypes
/**
 * Authenticator findUnique
 */
export type AuthenticatorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
  /**
   * Filter, which Authenticator to fetch.
   */
  where: Prisma.AuthenticatorWhereUniqueInput
}

/**
 * Authenticator findUniqueOrThrow
 */
export type AuthenticatorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
  /**
   * Filter, which Authenticator to fetch.
   */
  where: Prisma.AuthenticatorWhereUniqueInput
}

/**
 * Authenticator findFirst
 */
export type AuthenticatorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
  /**
   * Filter, which Authenticator to fetch.
   */
  where?: Prisma.AuthenticatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Authenticators to fetch.
   */
  orderBy?: Prisma.AuthenticatorOrderByWithRelationInput | Prisma.AuthenticatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Authenticators.
   */
  cursor?: Prisma.AuthenticatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Authenticators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Authenticators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Authenticators.
   */
  distinct?: Prisma.AuthenticatorScalarFieldEnum | Prisma.AuthenticatorScalarFieldEnum[]
}

/**
 * Authenticator findFirstOrThrow
 */
export type AuthenticatorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
  /**
   * Filter, which Authenticator to fetch.
   */
  where?: Prisma.AuthenticatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Authenticators to fetch.
   */
  orderBy?: Prisma.AuthenticatorOrderByWithRelationInput | Prisma.AuthenticatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Authenticators.
   */
  cursor?: Prisma.AuthenticatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Authenticators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Authenticators.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Authenticators.
   */
  distinct?: Prisma.AuthenticatorScalarFieldEnum | Prisma.AuthenticatorScalarFieldEnum[]
}

/**
 * Authenticator findMany
 */
export type AuthenticatorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
  /**
   * Filter, which Authenticators to fetch.
   */
  where?: Prisma.AuthenticatorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Authenticators to fetch.
   */
  orderBy?: Prisma.AuthenticatorOrderByWithRelationInput | Prisma.AuthenticatorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Authenticators.
   */
  cursor?: Prisma.AuthenticatorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Authenticators from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Authenticators.
   */
  skip?: number
  distinct?: Prisma.AuthenticatorScalarFieldEnum | Prisma.AuthenticatorScalarFieldEnum[]
}

/**
 * Authenticator create
 */
export type AuthenticatorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
  /**
   * The data needed to create a Authenticator.
   */
  data: Prisma.XOR<Prisma.AuthenticatorCreateInput, Prisma.AuthenticatorUncheckedCreateInput>
}

/**
 * Authenticator createMany
 */
export type AuthenticatorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Authenticators.
   */
  data: Prisma.AuthenticatorCreateManyInput | Prisma.AuthenticatorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Authenticator createManyAndReturn
 */
export type AuthenticatorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * The data used to create many Authenticators.
   */
  data: Prisma.AuthenticatorCreateManyInput | Prisma.AuthenticatorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Authenticator update
 */
export type AuthenticatorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
  /**
   * The data needed to update a Authenticator.
   */
  data: Prisma.XOR<Prisma.AuthenticatorUpdateInput, Prisma.AuthenticatorUncheckedUpdateInput>
  /**
   * Choose, which Authenticator to update.
   */
  where: Prisma.AuthenticatorWhereUniqueInput
}

/**
 * Authenticator updateMany
 */
export type AuthenticatorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Authenticators.
   */
  data: Prisma.XOR<Prisma.AuthenticatorUpdateManyMutationInput, Prisma.AuthenticatorUncheckedUpdateManyInput>
  /**
   * Filter which Authenticators to update
   */
  where?: Prisma.AuthenticatorWhereInput
  /**
   * Limit how many Authenticators to update.
   */
  limit?: number
}

/**
 * Authenticator updateManyAndReturn
 */
export type AuthenticatorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * The data used to update Authenticators.
   */
  data: Prisma.XOR<Prisma.AuthenticatorUpdateManyMutationInput, Prisma.AuthenticatorUncheckedUpdateManyInput>
  /**
   * Filter which Authenticators to update
   */
  where?: Prisma.AuthenticatorWhereInput
  /**
   * Limit how many Authenticators to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Authenticator upsert
 */
export type AuthenticatorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
  /**
   * The filter to search for the Authenticator to update in case it exists.
   */
  where: Prisma.AuthenticatorWhereUniqueInput
  /**
   * In case the Authenticator found by the `where` argument doesn't exist, create a new Authenticator with this data.
   */
  create: Prisma.XOR<Prisma.AuthenticatorCreateInput, Prisma.AuthenticatorUncheckedCreateInput>
  /**
   * In case the Authenticator was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AuthenticatorUpdateInput, Prisma.AuthenticatorUncheckedUpdateInput>
}

/**
 * Authenticator delete
 */
export type AuthenticatorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
  /**
   * Filter which Authenticator to delete.
   */
  where: Prisma.AuthenticatorWhereUniqueInput
}

/**
 * Authenticator deleteMany
 */
export type AuthenticatorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Authenticators to delete
   */
  where?: Prisma.AuthenticatorWhereInput
  /**
   * Limit how many Authenticators to delete.
   */
  limit?: number
}

/**
 * Authenticator without action
 */
export type AuthenticatorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Authenticator
   */
  select?: Prisma.AuthenticatorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Authenticator
   */
  omit?: Prisma.AuthenticatorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AuthenticatorInclude<ExtArgs> | null
}
